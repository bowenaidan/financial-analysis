import requests
import pandas as pd
import numpy as np
import re
from bs4 import BeautifulSoup
from datetime import datetime
import argparse
from io import StringIO

def get_cik(ticker):
    ticker = ticker.upper()
    url = f'https://www.sec.gov/files/company_tickers.json'
    headers = {'User-Agent': 'Aidan Bowen (rivott35@hotmail.com)'}
    response = requests.get(url, headers=headers)
    if response.status_code != 200:
        raise Exception('Failed to fetch ticker to CIK mapping.')
    data = response.json()
    for item in data.values():
        if item['ticker'] == ticker:
            return str(item['cik_str']).zfill(10)
    raise Exception(f'CIK not found for ticker {ticker}.')

def get_latest_10k_url(cik):
    url = f'https://data.sec.gov/submissions/CIK{cik}.json'
    headers = {'User-Agent': 'Your Name (your.email@example.com)'}
    response = requests.get(url, headers=headers)
    if response.status_code != 200:
        raise Exception('Failed to fetch company submissions.')
    data = response.json()
    filings = data.get('filings', {}).get('recent', {})
    for i, form in enumerate(filings.get('form', [])):
        if form == '10-K':
            accession = filings['accessionNumber'][i].replace('-', '')
            primaryDoc = filings['primaryDocument'][i]
            print(f'https://www.sec.gov/Archives/edgar/data/{int(cik)}/{accession}/{primaryDoc}')
            return f'https://www.sec.gov/Archives/edgar/data/{int(cik)}/{accession}/{primaryDoc}'
    raise Exception('No 10-K filing found.')

def extract_cash_flow_statement(filing_url):
    headers = {'User-Agent': 'Your Name (your.email@example.com)'}
    response = requests.get(filing_url, headers=headers)
    if response.status_code != 200:
        raise Exception('Failed to fetch filing document.')

    soup = BeautifulSoup(response.content, 'html.parser')

    for candidate in soup.find_all(string=re.compile(r'Consolidated Statements? of Cash Flows', re.IGNORECASE)):
        if candidate.find_parent('a'):
            continue

        parent = candidate.find_parent()
        while parent and not parent.find_next('table'):
            parent = parent.find_parent()

        if parent:
            table = parent.find_next('table')
            try:
                cleaned_html = str(table).replace('<br>', ' ').replace('<br/>', ' ').replace('<br />', ' ')
                df = pd.read_html(StringIO(cleaned_html), flavor='lxml')[0]
                if df is not None:
                    df = clean_and_print(df)
                return df
            except Exception as e:
                print(f"Error: {e}")

    raise Exception('Cash Flow Statement not found.')

def calculate_fcf(cash_flow_df):
    df = cash_flow_df.dropna(how='all')
    df.columns = df.columns.map(str)
    ocf_row = df[df.iloc[:, 0].str.strip().str.lower() == 'cash generated by operating activities']
    capex_row = df[df.iloc[:, 0].str.strip().str.lower() == 'payments for acquisition of property, plant and equipment']
    if ocf_row.empty or capex_row.empty:
        print(ocf_row)
        print(capex_row)
        raise Exception('Required cash flow items not found.')
    ocf = pd.to_numeric(ocf_row.iloc[0, 1:], errors='coerce')
    capex = pd.to_numeric(capex_row.iloc[0, 1:], errors='coerce')
    print(ocf)
    print(capex)
    fcf = ocf + capex
    return fcf[::-1]  # Reverse to chronological order

def project_fcf(fcf_series, years=5, growth_rate=0.07):
    last_fcf = fcf_series.iloc[-1]
    return [last_fcf * (1 + growth_rate) ** i for i in range(1, years + 1)]

def perform_dcf(fcf_series, projected_fcfs, discount_rate=0.10, terminal_growth=0.025):
    discounted_fcfs = [fcf / (1 + discount_rate) ** i for i, fcf in enumerate(fcf_series, start=1)]
    discounted_projected_fcfs = [fcf / (1 + discount_rate) ** i for i, fcf in enumerate(projected_fcfs, start=len(fcf_series) + 1)]
    terminal_value = projected_fcfs[-1] * (1 + terminal_growth) / (discount_rate - terminal_growth)
    discounted_terminal = terminal_value / (1 + discount_rate) ** len(projected_fcfs)
    enterprise_value = sum(discounted_fcfs) + sum(discounted_projected_fcfs) + discounted_terminal
    
    return enterprise_value


def clean_and_print(df):
    df = df.T.drop_duplicates().T
    df = df.loc[:, ~df.apply(lambda col: col.astype(str).str.contains(r'\$').any())]
    min_non_nan = int(df.shape[0] * 0.5)
    df = df.dropna(axis=1, thresh=min_non_nan)
    cols_to_fix = df.columns[-3:]
    # Clean and convert each of the last 3 columns
    for col in cols_to_fix:
        df[col] = (
            df[col]
            .astype(str)
            .str.replace(r'[\$,)]', '', regex=True)
            .str.replace(r'\(', '-', regex=True)
        )
        df[col] = pd.to_numeric(df[col], errors='coerce')
    df.to_excel('cash_flow_statement.xlsx', index=False)
    print("âœ… Saved cash flow data to cash_flow_statement.xlsx")
    return df

def main():
    parser = argparse.ArgumentParser(description='Automated DCF Analysis from SEC Filings')
    parser.add_argument('ticker', type=str, help='Stock ticker symbol (e.g., AAPL)')
    parser.add_argument('--growth', type=float, default=0.07, help='FCF growth rate (default: 7%)')
    parser.add_argument('--discount', type=float, default=0.10, help='Discount rate (default: 10%)')
    parser.add_argument('--terminal', type=float, default=0.025, help='Terminal growth rate (default: 2.5%)')
    args = parser.parse_args()

    try:
        cik = get_cik(args.ticker)
        filing_index_url = get_latest_10k_url(cik)
        cash_flow_df = extract_cash_flow_statement(filing_index_url)
        fcf_series = calculate_fcf(cash_flow_df)
        print("Free Cash Flow Series: \n", fcf_series)
        projected_fcfs = project_fcf(fcf_series, growth_rate=args.growth)
        print("Projected Free Cash Flow: \n", projected_fcfs)
        enterprise_value = perform_dcf(fcf_series, projected_fcfs, discount_rate=args.discount, terminal_growth=args.terminal)
        print(f"\nEnterprise Value for {args.ticker.upper()}: ${enterprise_value:,.2f}")
    except Exception as e:
        print(f"Error: {e}")

if __name__ == '__main__':
    main()
